#!/bin/bash

# A function to get all the variables to show on main window.
function getvar() {
    CORE_FIRST=$(awk '/^processor/ {print $3; exit}' /proc/cpuinfo)
    CORE_LAST=$(awk '$1 == "processor" {print $3}' /proc/cpuinfo | tail -1)
    UIDS=$(ls /run/user | head -1)
    DEFAULT_GOVERNOR=$(</var/lib/batman/default_cpu_governor)
    AVPOL=$(ls /sys/devices/system/cpu/cpufreq | grep -c policy)
    FIRSTPOL=$(ls /sys/devices/system/cpu/cpufreq | grep policy | head -1)
    FIRSTPOLCORE=$(cut -c1 - < /sys/devices/system/cpu/cpufreq/$FIRSTPOL/related_cpus)
    LASTPOLCORE=$(awk '{for(i=NF;i>=1;i--) printf("%s ", $i)}' /sys/devices/system/cpu/cpufreq/$FIRSTPOL/related_cpus | cut -c1 -)
    if [ -f "/var/lib/batman/default_gpu_governor" ] && [ ! -d $(cat /var/lib/batman/default_gpu_governor) ]; then
       DEFAULT_GPU_GOVERNOR="unknown"
    elif [ ! -f "/var/lib/batman/default_gpu_governor" ]; then
       DEFAULT_GPU_GOVERNOR="unknown"
    else
       DEFAULT_GPU_GOVERNOR=$(</var/lib/batman/default_gpu_governor)
    fi
    UPTIME=$(awk '{print int($1)/60}' /proc/uptime | cut -f1 -d .)
    SCREEN=$(XDG_RUNTIME_DIR=/run/user/$UIDS/ wlr-randr | sed -n '/Enabled/s/^.\{11\}//p')
    CHARGE=$(upower -d | awk '{if(/state/){if(!seen[$0]){seen[$0]=1;print substr($0,26);exit}}}')
    BATMANSTAT=$(systemctl is-active batman)
    PID=$(systemctl show --property MainPID --value batman)
    CPU_USAGE=$(awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1) ; }' <(grep 'cpu ' /proc/stat) <(sleep 0.5; grep 'cpu ' /proc/stat) | cut -d "." -f1)
}

# Function that shows values that do not change after the system is booted.
function permvar() {
    echo "UID:" $UIDS
    echo
    echo "First CPU core:" $CORE_FIRST
    echo
    echo "Last CPU core:" $CORE_LAST
    echo
    echo "Default CPU governor:" $DEFAULT_GOVERNOR
    echo
    echo "Default GPU governor:" $DEFAULT_GPU_GOVERNOR
    echo
    echo "available CPU policy groups:" $AVPOL
    echo
    echo "First CPU policy group:" $FIRSTPOL
    echo
    echo "First core $FIRSTPOL:" $FIRSTPOLCORE
    echo
    echo "Last core of $FIRSTPOL:" $LASTPOLCORE
}

# Function that shows values that do change often and need to get updated.
function tempvar() {
    echo
    echo "Batman is" $BATMANSTAT
    echo
    echo "Batman pid:" $PID
    echo
    echo "Current uptime in minutes:" $UPTIME
    echo
    echo "Current screen status:" $SCREEN
    echo
    echo "Current charging status:" $CHARGE
    echo
    echo "Current CPU usage:" $CPU_USAGE
    echo
    echo "Current config: "
    echo
    while IFS= read -r line; do echo $line && echo; done < /var/lib/batman/config
}

# Function that inputs a number from user as MAX_CPU_USAGE.
function maxusage() {
    USERINPUT=$(yad --title "MAX_CPU_USAGE" --form --field="Input a value between 0 and 100" --info --text="MAX_CPU_USAGE checks until what CPU usage it should keep cpu cores in offline state. Increasing this number will smoothen out audio or background playback when screen is locked and device is idling. increasing it will also higher battery usage.")
    USERNUM=$(echo "$USERINPUT" | rev | cut -c 2- | rev)
    if [ "$USERNUM" -ge 0 ] && [ "$USERNUM" -le 100 ]; then
        sed -i "s/MAX_CPU_USAGE.*/MAX_CPU_USAGE=$USERNUM/g" /var/lib/batman/config
    else
        yad --title "Wrong Input" --text "Invalid input. Input must be a number between 0 and 100" --warning
        maxusage
    fi
}

# Funtion that runs the main window.
function main() {
(
   while true;
   do
       getvar
       echo -e '\f'
       permvar
       tempvar
       sleep 1s
   done
) | yad --title batman --listen  --no-markup \
   --auto-close --auto-kill --monitor --text-info --window-icon=battery \
   --button="Restart":'pkexec systemctl restart batman' \
   --button="Stop":'pkexec systemctl stop batman' \
   --button="Config page 1":"batman-gui config" \
   --button="Config page 2":"batman-gui config2" \
   --button="Max usage":"batman-gui maxusage"
}

# Function for first configuration page.
function config() {
(
   while true;
   do
       CONFIG=$(</var/lib/batman/config)
       echo -e '\f'
       echo "Powersave allows CPU go into powersaving."
       echo
       echo "Offlining is the process of CPU cores shutting down."
       echo "These two only activate when device is idling."
       echo "They also save a lot of battery."
       echo
       echo "Make sure to restart the service on changes."
       echo
       echo "Current config: "
       echo
       while IFS= read -r line; do echo $line && echo; done < /var/lib/batman/config

       while true;
       do

           NEWCONFIG=$(</var/lib/batman/config)
           if [ "$CONFIG" == "$NEWCONFIG" ]; then
               sleep 0.5
           else
               break
           fi

       done

   done
   ) | yad --title "batman config page 1" --listen \
   --auto-close --auto-kill --monitor --text-info --window-icon=battery \
   --button="Powersave off":'sed -i "s/POWERSAVE.*/POWERSAVE=false/g" /var/lib/batman/config' \
   --button="Powersave on":'sed -i "s/POWERSAVE.*/POWERSAVE=true/g" /var/lib/batman/config' \
   --button="Offline off":'sed -i "s/OFFLINE.*/OFFLINE=false/g" /var/lib/batman/config' \
   --button="Offline on":'sed -i "s/OFFLINE.*/OFFLINE=true/g" /var/lib/batman/config'
}

# Function for second configuration page.
function config2() {
(
   while true;
   do
       CONFIG=$(</var/lib/batman/config)
       echo -e '\f'
       echo "GPUsave allows GPU go into powersaving."
       echo "This feature is still experimental."
       echo
       echo "Chargesave indicates whether or not put device to"
       echo "powersave when its charging up."
       echo
       echo "Make sure to restart the service on changes."
       echo
       echo "Current config: "
       echo
       while IFS= read -r line; do echo $line && echo; done < /var/lib/batman/config

       while true;
       do

           NEWCONFIG=$(</var/lib/batman/config)
           if [ "$CONFIG" == "$NEWCONFIG" ]; then
               sleep 0.5
           else
               break
           fi

       done

   done
   ) | yad --title "batman config page 2" --listen \
   --auto-close --auto-kill --monitor --text-info --window-icon=battery \
   --button="GPUsave off":'sed -i "s/GPUSAVE.*/GPUSAVE=false/g" /var/lib/batman/config' \
   --button="GPUsave on":'sed -i "s/GPUSAVE.*/GPUSAVE=true/g" /var/lib/batman/config' \
   --button="Chargesave off":'sed -i "s/CHARGESAVE.*/CHARGESAVE=false/g" /var/lib/batman/config' \
   --button="Chargesave on":'sed -i "s/CHARGESAVE.*/CHARGESAVE=true/g" /var/lib/batman/config'
}

# Function displayed when user passes no arguments.
function usage() {
   echo "Usage: 'batman-gui main' to launch the main window and 'batman config' to launch the first config window and 'batman config2' to launch the second config window."
}

# Let user pass arguments.
"$@"

# If no argument was passed show help.
if [ "$#" -eq 0 ]; then
    usage
    exit 0
fi
